@allowed(['java', 'bedrock'])
param appName string
param servername string
param storageName string
param memoryMB int
param vcpu string
param location string = resourceGroup().location
param dnsZone string
param image string = appName == 'java' ? 'robbelouwet/paper-dedicated' : 'robbelouwet/bedrock-dedicated'

var fileShareName = 'fs-${appName}-${servername}'
var aciName = 'aci-${appName}-${servername}'
var volumeName = 'volume-${appName}-${servername}'

var gameplayPort = appName == 'java' ? 25565 : 19132
var consolePort = 8765

resource storageAccResource 'Microsoft.Storage/storageAccounts@2023-01-01' existing = {
  name: storageName
}

module fileShareModule '../modules/storage/storage-account/file-service/share/main.bicep' = {
  name: '${fileShareName}-deployment'
  params: {
    name: fileShareName
    storageAccountName: storageAccResource.name
    fileServicesName: 'default'
    accessTier: 'Hot'
    enabledProtocols: 'SMB'
  }
}

resource aciServer 'Microsoft.ContainerInstance/containerGroups@2023-05-01' = {
  name: aciName
  location: location
  properties: {
    ipAddress: {
      autoGeneratedDomainNameLabelScope: 'TenantReuse'
      dnsNameLabel: servername
      ports: [
        {
          port: gameplayPort
          protocol: appName == 'java' ? 'TCP' : 'UDP'
        }
        {
          port: consolePort
          protocol: 'TCP'
        }
      ]
      type: 'Public'
    }
    containers: [
      {
        name: 'server-container'
        properties: {
          image: image
          ports: [
            {
              port: gameplayPort
              protocol: appName == 'java' ? 'TCP' : 'UDP'
            }
            {
              port: consolePort
              protocol: 'TCP'
            }
          ]
          resources: {
            requests: {
              cpu: json(vcpu)
              memoryInGB: memoryMB / 1024
            }
          }
          volumeMounts: [
            {
              mountPath: '/data'
              name: volumeName
              readOnly: false
            }
          ]
        }
      }
    ]
    volumes: [
      {
        azureFile: {
          readOnly: false
          shareName: fileShareModule.outputs.name
          storageAccountKey: storageAccResource.listKeys().keys[0].value
          storageAccountName: storageAccResource.name
        }
        name: volumeName
      }
    ]
    osType: 'Linux'
  }
}

resource zone 'Microsoft.Network/dnsZones@2018-05-01' existing = {
  name: dnsZone
}

resource record 'Microsoft.Network/dnsZones/CNAME@2018-05-01' = {
  parent: zone
  name: servername
  properties: {
    TTL: 3600
    CNAMERecord: {
      cname: aciServer.properties.ipAddress.fqdn
    }
  }
}

output host string = '${servername}.${dnsZone}'
output location string = location

// Resource IDs
output aciId string = aciServer.id
output fileShareId string = fileShareModule.outputs.resourceId
output dnsRecordId string = record.id
